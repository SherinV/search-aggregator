
ARCH                   = $(shell uname -m)
DOCKER_FLAG            =
DOCKER_SERVER         ?= hyc-cloud-private-integration-docker-local.artifactory.swg-devops.com
GIT_REMOTE_URL         = $(shell git config --get remote.origin.url)
IMAGE_REPO            ?= hyc-cloud-private-integration-docker-local.artifactory.swg-devops.com/ibmcom
MANIFEST_VERSION      ?= v0.7.0
RELEASE_TAG           ?= latest

# Variables for Red Hat required labels
IMAGE_NAME             = search-aggregator
IMAGE_DISPLAY_NAME     = Multicloud Manager Search Aggregator
IMAGE_DESCRIPTION      = The search-aggregator is a Multicloud Manager component that sits in the hub cluster. It process the data sent by the collectors.
IMAGE_MAINTAINER       = jpadilla@us.ibm.com
IMAGE_VENDOR           = IBM
IMAGE_SUMMARY          = $(IMAGE_DESCRIPTION)
IMAGE_OPENSHIFT_TAGS   = multicloud-manager
# IMAGE_VERSION will be set by the app-version target
# IMAGE_RELEASE will be set by the app-version target

ifeq ($(ARCH), x86_64)
	IMAGE_NAME_ARCH = $(IMAGE_NAME)-amd64
else
	IMAGE_NAME_ARCH = $(IMAGE_NAME)-$(ARCH)
endif


.PHONY: docker-login app-version check-env image push release show-labels manifest-tool multi-arch

docker-login:
ifndef $(and DOCKER_USERNAME, DOCKER_PASSWORD)
	$(error DOCKER_USERNAME and DOCKER_PASSWORD must be defined, required for goal (docker-login))
endif
	@docker login -u $(DOCKER_USERNAME) -p $(DOCKER_PASSWORD) $(DOCKER_SERVER)

app-version:
	$(eval WORKING_CHANGES := $(shell git status --porcelain))
	$(eval BUILD_DATE := $(shell date +%m/%d@%H:%M:%S))
	$(eval GIT_COMMIT := $(shell git rev-parse --short HEAD))
	$(eval VCS_REF := $(if $(WORKING_CHANGES),$(GIT_COMMIT)-$(BUILD_DATE),$(GIT_COMMIT)))
	$(eval APP_VERSION ?= $(if $(shell cat VERSION 2> /dev/null),$(shell cat VERSION 2> /dev/null),0.0.1))
	$(eval IMAGE_VERSION ?= $(APP_VERSION)-$(GIT_COMMIT))
	$(eval IMAGE_RELEASE ?= $(VCS_REF))
	@echo "App: $(IMAGE_NAME_ARCH) $(IMAGE_VERSION)"

check-env:
ifndef IMAGE_REPO
	$(error IMAGE_REPO is undefined)
endif
ifndef IMAGE_NAME
	$(error IMAGE_NAME is undefined)
endif

ifneq ($(ARCH), x86_64)
	$(eval DOCKER_FLAG = -f Dockerfile.$(ARCH))
	@echo "DOCKER_FLAG: $(DOCKER_FLAG)"
endif

image: check-env app-version
	docker build -t $(IMAGE_REPO)/$(IMAGE_NAME_ARCH):$(IMAGE_VERSION) \
           --build-arg "VCS_REF=$(VCS_REF)" \
           --build-arg "VCS_URL=$(GIT_REMOTE_URL)" \
           --build-arg "IMAGE_NAME=$(IMAGE_NAME)" \
           --build-arg "IMAGE_DISPLAY_NAME=$(IMAGE_DISPLAY_NAME)" \
           --build-arg "IMAGE_MAINTAINER=$(IMAGE_MAINTAINER)" \
           --build-arg "IMAGE_VENDOR=$(IMAGE_VENDOR)" \
           --build-arg "IMAGE_VERSION=$(IMAGE_VERSION)" \
           --build-arg "IMAGE_RELEASE=$(IMAGE_RELEASE)" \
           --build-arg "IMAGE_SUMMARY=$(IMAGE_SUMMARY)" \
           --build-arg "IMAGE_OPENSHIFT_TAGS=$(IMAGE_OPENSHIFT_TAGS)" \
           --build-arg "IMAGE_NAME_ARCH=$(IMAGE_NAME_ARCH)" \
           --build-arg "IMAGE_DESCRIPTION=$(IMAGE_DESCRIPTION)" $(DOCKER_FLAG) .

push: check-env app-version
	docker push $(IMAGE_REPO)/$(IMAGE_NAME_ARCH):$(IMAGE_VERSION)

release: push
	docker tag $(IMAGE_REPO)/$(IMAGE_NAME_ARCH):$(IMAGE_VERSION) $(IMAGE_REPO)/$(IMAGE_NAME_ARCH):$(RELEASE_TAG)
	docker push $(IMAGE_REPO)/$(IMAGE_NAME_ARCH):$(RELEASE_TAG)

show-labels: app-version
	@docker inspect $(IMAGE_REPO)/$(IMAGE_NAME_ARCH):$(IMAGE_VERSION) --format='{{json .Config.Labels}}' | tr , '\n' | tr -d '{' | tr -d '}'

manifest-tool:
ifeq ($(ARCH), x86_64)
	$(eval MANIFEST_TOOL_NAME = manifest-tool-linux-amd64)
else
	$(eval MANIFEST_TOOL_NAME = manifest-tool-linux-$(ARCH))
endif
	sudo curl -sSL -o /usr/local/bin/manifest-tool https://github.com/estesp/manifest-tool/releases/download/$(MANIFEST_VERSION)/$(MANIFEST_TOOL_NAME)
	sudo chmod +x /usr/local/bin/manifest-tool

multi-arch:
	cp manifest.yaml /tmp/manifest.yaml
	sed -i -e "s|__RELEASE_TAG__|$(RELEASE_TAG)|g" -e "s|__IMAGE_NAME__|$(IMAGE_NAME)|g" -e "s|__IMAGE_REPO__|$(IMAGE_REPO)|g" /tmp/manifest.yaml
	manifest-tool push from-spec /tmp/manifest.yaml
